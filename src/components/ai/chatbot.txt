Enhanced Chatbot Component

jsx

// src/components/ai/Chatbot.js
import React, { useState, useRef, useEffect } from 'react';
import { aiService } from '../../services/aiServices';
import { useAuth } from '../../context/AuthContext';
import { useCart } from '../../context/CartContext';
import { MessageCircle, Send, X, Bot, User, Minimize2, Maximize2 } from 'lucide-react';

const Chatbot = () => {
  const { user } = useAuth();
  const { cartItems, getCartTotal } = useCart();
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Hi! I'm your AI shopping assistant. I can help you with product recommendations, order information, and answer any questions you have. How can I assist you today?",
      sender: 'bot',
      timestamp: new Date(),
      type: 'greeting'
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [quickReplies, setQuickReplies] = useState([
    "Show me recommendations",
    "Help with my cart",
    "Track my order",
    "Return policy"
  ]);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  useEffect(() => {
    if (isOpen && user && messages.length === 1) {
      // Personalized greeting for logged-in users
      const welcomeMessage = {
        id: Date.now(),
        text: `Welcome back, ${user.firstName}! I can see you have ${cartItems.length} item${cartItems.length !== 1 ? 's' : ''} in your cart. Would you like to complete your purchase or need help finding something else?`,
        sender: 'bot',
        timestamp: new Date(),
        type: 'personalized'
      };
      setMessages(prev => [...prev, welcomeMessage]);
    }
  }, [isOpen, user, cartItems.length]);

  const sendMessage = async (messageText = inputMessage, isQuickReply = false) => {
    if (!messageText.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: messageText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    if (!isQuickReply) {
      setInputMessage('');
    }
    setIsTyping(true);

    try {
      const context = {
        user,
        cartItems,
        cartTotal: getCartTotal(),
        hasItems: cartItems.length > 0
      };

      const response = await aiService.getChatbotResponse(messageText, context);
      
      const botMessage = {
        id: Date.now() + 1,
        text: response.message,
        sender: 'bot',
        timestamp: new Date(),
        suggestions: response.suggestions || [],
        actions: response.actions || []
      };
      
      setMessages(prev => [...prev, botMessage]);
      
      // Update quick replies based on context
      if (response.quickReplies) {
        setQuickReplies(response.quickReplies);
      }
    } catch (error) {
      console.error('Chatbot error:', error);
      const errorMessage = {
        id: Date.now() + 1,
        text: "I'm sorry, I'm having trouble connecting right now. Please try again in a moment.",
        sender: 'bot',
        timestamp: new Date(),
        type: 'error'
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleQuickReply = (reply) => {
    sendMessage(reply, true);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (timestamp) => {
    return timestamp.toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const renderMessage = (message) => (
    <div key={message.id} className={`message ${message.sender}`}>
      <div className="message-avatar">
        {message.sender === 'bot' ? <Bot size={16} /> : <User size={16} />}
      </div>
      <div className="message-content">
        <div className="message-bubble">
          <p>{message.text}</p>
        </div>
        
        {/* Action buttons for bot messages */}
        {message.actions && message.actions.length > 0 && (
          <div className="message-actions">
            {message.actions.map((action, index) => (
              <button 
                key={index}
                className="action-btn"
                onClick={() => handleQuickReply(action.text)}
              >
                {action.label}
              </button>
            ))}
          </div>
        )}
        
        <span className="message-time">
          {formatTime(message.timestamp)}
        </span>
      </div>
    </div>
  );

  return (
    <div className="chatbot-container">
      {/* Chat Toggle Button with notification */}
      <button 
        className={`chat-toggle-btn ${isOpen ? 'active' : ''}`}
        onClick={() => setIsOpen(!isOpen)}
      >
        {isOpen ? <X size={24} /> : <MessageCircle size={24} />}
        {!isOpen && messages.length > 1 && (
          <span className="chat-notification"></span>
        )}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className={`chat-window ${isMinimized ? 'minimized' : ''}`}>
          <div className="chat-header">
            <div className="chat-header-info">
              <Bot size={20} />
              <div>
                <span className="chat-title">AI Assistant</span>
                <span className="chat-status">Online</span>
              </div>
            </div>
            <div className="chat-header-controls">
              <button 
                onClick={() => setIsMinimized(!isMinimized)}
                className="minimize-btn"
              >
                {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
              </button>
              <button onClick={() => setIsOpen(false)} className="close-chat">
                <X size={16} />
              </button>
            </div>
          </div>

          {!isMinimized && (
            <>
              <div className="chat-messages">
                {messages.map(renderMessage)}
                
                {isTyping && (
                  <div className="message bot">
                    <div className="message-avatar">
                      <Bot size={16} />
                    </div>
                    <div className="typing-indicator">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>

              {/* Quick Replies */}
              {quickReplies.length > 0 && (
                <div className="quick-replies">
                  {quickReplies.map((reply, index) => (
                    <button
                      key={index}
                      className="quick-reply-btn"
                      onClick={() => handleQuickReply(reply)}
                    >
                      {reply}
                    </button>
                  ))}
                </div>
              )}

              {/* Input Form */}
              <form onSubmit={(e) => { e.preventDefault(); sendMessage(); }} className="chat-input-form">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Type your message..."
                  className="chat-input"
                  rows="1"
                  disabled={isTyping}
                />
                <button 
                  type="submit" 
                  className="chat-send-btn"
                  disabled={!inputMessage.trim() || isTyping}
                >
                  <Send size={18} />
                </button>
              </form>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default Chatbot;

Enhanced AI Service with Advanced Chatbot Logic

javascript

// src/services/aiServices.js (Updated chatbot methods)
class AIService {
  // ... (previous methods remain the same)

  // Enhanced chatbot with context awareness
  async getChatbotResponse(message, context = {}) {
    await this.delay(500);
    
    const lowerMessage = message.toLowerCase();
    const { user, cartItems = [], cartTotal = 0, hasItems = false } = context;

    // Intent detection with more sophisticated logic
    const intent = this.detectIntent(lowerMessage);
    
    switch (intent) {
      case 'greeting':
        return this.getGreetingResponse(user);
      
      case 'cart_help':
        return this.getCartHelpResponse(cartItems, cartTotal, hasItems);
      
      case 'recommendations':
        return this.getRecommendationResponse(user);
      
      case 'order_tracking':
        return this.getOrderTrackingResponse(user);
      
      case 'shipping':
        return this.getShippingResponse();
      
      case 'returns':
        return this.getReturnsResponse();
      
      case 'product_search':
        return this.getProductSearchResponse(message);
      
      case 'pricing':
        return this.getPricingResponse();
      
      case 'support':
        return this.getSupportResponse();
      
      case 'checkout':
        return this.getCheckoutResponse(hasItems);
      
      default:
        return this.getDefaultResponse();
    }
  }

  detectIntent(message) {
    const intents = {
      greeting: ['hello', 'hi', 'hey', 'good morning', 'good afternoon'],
      cart_help: ['cart', 'basket', 'items', 'checkout', 'purchase'],
      recommendations: ['recommend', 'suggest', 'similar', 'like this', 'show me'],
      order_tracking: ['order', 'track', 'shipping', 'delivery', 'status'],
      shipping: ['ship', 'deliver', 'freight', 'send'],
      returns: ['return', 'refund', 'exchange', 'money back'],
      product_search: ['find', 'search', 'look for', 'where is'],
      pricing: ['price', 'cost', 'expensive', 'cheap', 'discount', 'sale'],
      support: ['help', 'support', 'problem', 'issue'],
      checkout: ['buy', 'purchase', 'complete order', 'pay']
    };

    for (const [intent, keywords] of Object.entries(intents)) {
      if (keywords.some(keyword => message.includes(keyword))) {
        return intent;
      }
    }

    return 'general';
  }

  getGreetingResponse(user) {
    const responses = user 
      ? [
          `Hello ${user.firstName}! How can I help you with your shopping today?`,
          `Hi there! I see you're back. What can I assist you with?`,
          `Welcome back! Ready to find some great products?`
        ]
      : [
          "Hello! I'm here to help you find the perfect products. What are you looking for?",
          "Hi! I can help you with product recommendations, orders, and more. How can I assist?",
          "Welcome to AI Store! I'm your personal shopping assistant. What can I help you with?"
        ];

    return {
      message: responses[Math.floor(Math.random() * responses.length)],
      quickReplies: ["Show recommendations", "Browse products", "Help with cart", "Track order"]
    };
  }

  getCartHelpResponse(cartItems, cartTotal, hasItems) {
    if (!hasItems) {
      return {
        message: "Your cart is currently empty. Would you like me to recommend some products or help you find something specific?",
        actions: [
          { label: "Get Recommendations", text: "Show me recommendations" },
          { label: "Browse Products", text: "Show me products" }
        ],
        quickReplies: ["Electronics", "Food & Beverages", "Furniture", "Popular items"]
      };
    }

    const itemCount = cartItems.length;
    const itemText = itemCount === 1 ? 'item' : 'items';
    
    return {
      message: `You have ${itemCount} ${itemText} in your cart totaling $${cartTotal.toFixed(2)}. Would you like to proceed to checkout, modify your cart, or need help with anything else?`,
      actions: [
        { label: "Proceed to Checkout", text: "Take me to checkout" },
        { label: "View Cart", text: "Show me my cart" }
      ],
      quickReplies: ["Checkout now", "Add more items", "Remove items", "Apply coupon"]
    };
  }

  getRecommendationResponse(user) {
    const preferences = user?.preferences || [];
    const hasPreferences = preferences.length > 0;
    
    return {
      message: hasPreferences 
        ? `Based on your interests in ${preferences.join(', ')}, I can show you some great products! What type of recommendations would you like?`
        : "I'd love to recommend some products for you! What categories interest you most, or would you like to see our popular items?",
      actions: [
        { label: "Popular Items", text: "Show popular products" },
        { label: "New Arrivals", text: "Show new products" }
      ],
      quickReplies: ["Electronics", "Home & Garden", "Fashion", "Books", "Sports"]
    };
  }

  getOrderTrackingResponse(user) {
    if (!user) {
      return {
        message: "To track your orders, please sign in to your account first. Once logged in, you can view all your order history and tracking information.",
        actions: [
          { label: "Sign In", text: "Take me to login" }
        ]
      };
    }

    // In a real app, you would fetch actual order data
    return {
      message: "I can help you track your orders! You can find detailed tracking information in your profile under 'Order History'. Would you like me to guide you there or help with something specific?",
      actions: [
        { label: "View Orders", text: "Show my orders" }
      ],
      quickReplies: ["Recent orders", "Delivery status", "Return an item"]
    };
  }

  getShippingResponse() {
    return {
      message: "We offer free shipping on orders over $50! Standard shipping takes 2-3 business days, and express shipping is available for next-day delivery. All orders are trackable once shipped.",
      quickReplies: ["Shipping costs", "Express delivery", "International shipping", "Track package"]
    };
  }

  getReturnsResponse() {
    return {
      message: "We have a hassle-free 30-day return policy! Items can be returned in original condition for a full refund. Electronics have a 15-day return window. Would you like help with a return?",
      actions: [
        { label: "Start Return", text: "I want to return an item" }
      ],
      quickReplies: ["Return process", "Refund timeline", "Exchange item", "Return shipping"]
    };
  }

  getProductSearchResponse(message) {
    // Extract potential product keywords
    const searchTerms = message.replace(/find|search|look for|where is/gi, '').trim();
    
    return {
      message: searchTerms 
        ? `I can help you find products related to "${searchTerms}". Let me search our catalog for you!`
        : "What specific product are you looking for? I can search our entire catalog to find exactly what you need.",
      actions: [
        { label: "Search Products", text: `Search for ${searchTerms}` }
      ],
      quickReplies: ["Electronics", "Home goods", "Fashion", "Books"]
    };
  }

  getPricingResponse() {
    return {
      message: "We offer competitive prices with regular sales and discounts! Sign up for our newsletter to get exclusive deals. We also have a price-match policy for identical products.",
      quickReplies: ["Current sales", "Price match", "Newsletter signup", "Bulk discounts"]
    };
  }

  getSupportResponse() {
    return {
      message: "I'm here to help! I can assist with orders, products, shipping, returns, and account questions. What specific issue can I help you resolve?",
      quickReplies: ["Order issues", "Product questions", "Account help", "Technical support"]
    };
  }

  getCheckoutResponse(hasItems) {
    if (!hasItems) {
      return {
        message: "You don't have any items in your cart yet. Would you like me to help you find some products first?",
        actions: [
          { label: "Browse Products", text: "Show me products" }
        ]
      };
    }

    return {
      message: "Great! I can help you complete your purchase. Make sure to review your items and apply any discount codes before checkout.",
      actions: [
        { label: "Go to Checkout", text: "Take me to checkout" }
      ],
      quickReplies: ["Apply coupon", "Check shipping", "Payment options", "Review cart"]
    };
  }

  getDefaultResponse() {
    const responses = [
      "I'd be happy to help! Can you tell me more about what you're looking for?",
      "I'm here to assist with your shopping needs. Could you be more specific about how I can help?",
      "Let me help you with that! What specific information do you need?",
      "I can help with products, orders, shipping, and more. What would you like to know?"
    ];

    return {
      message: responses[Math.floor(Math.random() * responses.length)],
      quickReplies: ["Product recommendations", "Order help", "Shipping info", "Return policy"]
    };
  }
}

export const aiService = new AIService();

Integration in App.js

jsx

// Add to src/App.js
import Chatbot from './components/ai/Chatbot';

function App() {
  return (
    <AuthProvider>
      <CartProvider>
        <Router>
          <div className="App">
            <Navbar />
            <main className="main-content">
              <Routes>
                {/* ... existing routes */}
              </Routes>
            </main>
            <Chatbot /> {/* Add chatbot here */}
          </div>
        </Router>
      </CartProvider>
    </AuthProvider>
  );
}

This enhanced chatbot now includes:

    Context Awareness - Understands user state, cart contents, and login status
    Intent Detection - Recognizes different types of user queries
    Quick Replies - Provides suggested responses for faster interaction
    Action Buttons - Direct links to specific app functions
    Personalization - Tailored responses based on user data
    Visual Enhancements - Better UI with typing indicators and message formatting
    Mobile Responsiveness - Works well on all device sizes
    Minimize/Maximize - Users can minimize the chat while keeping it accessible

The chatbot can now handle complex conversations about orders, recommendations, cart management, and provide contextual assistance throughout the shopping experience.
